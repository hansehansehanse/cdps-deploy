# Generated by Django 5.1.7 on 2025-05-06 10:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataset_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('date', models.DateField()),
                ('route', models.CharField(max_length=100)),
                ('time', models.TimeField()),
                ('num_commuters', models.IntegerField()),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('user_code', models.UUIDField()),
                ('filename', models.CharField(blank=True, max_length=255, null=True)),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('day_of_week', models.CharField(blank=True, max_length=20)),
                ('day', models.CharField(blank=True, max_length=20, null=True)),
                ('month', models.CharField(blank=True, max_length=20)),
                ('is_holiday', models.BooleanField(default=False)),
                ('is_friday', models.BooleanField(default=False)),
                ('is_saturday', models.BooleanField(default=False)),
                ('is_day_before_holiday', models.BooleanField(default=False)),
                ('is_long_weekend', models.BooleanField(default=False)),
                ('is_day_before_long_weekend', models.BooleanField(default=False)),
                ('is_local_holiday', models.BooleanField(default=False)),
                ('is_univesity_event', models.BooleanField(default=False)),
                ('is_local_event', models.BooleanField(default=False)),
                ('is_others', models.BooleanField(default=False)),
                ('is_flagged', models.BooleanField(default=False)),
                ('is_within_ay', models.BooleanField(default=False)),
                ('is_start_of_sem', models.BooleanField(default=False)),
                ('is_day_before_end_of_sem', models.BooleanField(default=False)),
                ('is_week_before_end_of_sem', models.BooleanField(default=False)),
                ('is_end_of_sem', models.BooleanField(default=False)),
                ('is_day_after_end_of_sem', models.BooleanField(default=False)),
                ('is_2days_after_end_of_sem', models.BooleanField(default=False)),
                ('is_week_after_end_of_sem', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='HolidayEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('event_name', models.CharField(max_length=255)),
                ('event_type', models.CharField(choices=[('holiday', 'Holiday')], max_length=50)),
                ('date', models.DateField(blank=True, null=True)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TemporalEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('event_name', models.CharField(max_length=255)),
                ('event_type', models.CharField(choices=[('local_holiday', 'Local Holiday'), ('university_event', 'University Event'), ('local_event', 'Local Event'), ('others', 'Others')], max_length=50)),
                ('date', models.DateField(blank=True, null=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="Enter a valid phone number (up to 15 digits, optional '+' sign).", regex='^\\+?\\d{9,15}$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('verified', models.BooleanField(default=False)),
                ('access_level', models.CharField(choices=[('Admin', 'Admin'), ('Bus Manager', 'Bus Manager')], default='Bus Manager', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=255)),
                ('details', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, to_field='user_code')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
    ]
